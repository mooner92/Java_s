Arrays.sort(array1);
Arrays.fill(array1,9);

try{}  //예외가 발생할 수 있는 문장
catch( 예외명 ){}  //예외를 던지면 여기서 잡아줌
finally{} //이거는 생략 가능
예외명 종류 

런타임 에러
ArithmaticException
NullPointerException 
ArrayIndexOutOfBoundsException
ClassCastException
NegativeArraySizeException
OutOfMemoryException
NoClassDefFoundException

컴파일 에러
ClassNotFoundException
IOException
illegalAccessException
NoSuchMethodException
NoSuchFieldException
InterruptedException
FileNotFoundException

처음 생성된 frame은 background속성을 못받음 -> panel이 아니기 때문
키 이벤트의 순서 = keyPressed -> keyTyped -> keyReleased
버튼의 이벤트 = implements ActionListner
키보드 이벤트 = implements KeyListner


key event 종류
int getKeyChar() 는 문자의 유니코드를 반환함
int getKeyCode() 는 문자의 키코드를 반환함
boolean isActionKey() 는 액션키이면 (copy , paste 등) true 반환 아니라면 false 반환

예문
public void keypressed(KeyEvent e){
    if(e.getKeyChar()=='c'){
        cnt++;  //입력된 문자가 'c'라면 cnt++
    }
}

public void keypressed(KeyEvent e){
    if(e.getKeyCode()==KeyEvent.VK_ENTER){
        cnt++; //입력된 문자가 엔터키 라면 cnt++;
    }
}

public void keyPressed(KeyEvent e){
    if(e.isControlDown()){
        sout("컨트롤이 눌린 상태입니다."); // 컨트롤이 눌려있는지 확인해주는 함수
    }
}

마우스이벤트

implements 종류가 세 가지나 있음
MouseListener 에 mousePressed , mouseReleased , mouseEntered , mouseExited , mouseClicked
MouseMotionListener 에 mouseDragged , mouseMoved 
휠은 제외
마우스리스너는 패널에 적용시킴 
예:) panel.addMouseListener(this); panel.addMouseMotionListener(this);
mouseListener e 에서
e.getx() , e.gety() 를 사용하여 (클릭)된 지점의 xy좌표를 호출 가능

추상 인터페이스인 MouseListener 을 implement하면 모든 함수들을 재정의 해 주어야함 -> clicked만 사용하고 싶은데
나머지도 다 빈 내용으로라도 채워주어야 함 ->  이를 방지하고자 MouseAdapter 클래스를 지원함
직접 만든 이벤트리스너테 MouseAdapter 클래스를 extends 해주면 쓰고싶은 이벤트만 작성하면 나머지는 빈 칸으로 자동으로 처리해줌

------------------------------------------------------------------------------------------------------------

그림함수 
따로 패널을 만들어줌(여기서는 JFrame을 extends 하는 것이 아닌 JPanel을 extends할 것 무조건!!!!!!!!!!!)
안에 protected함수를 만들고 매개변수로 Graphics g 를 받아줌

g.drawOval(시작x,시작y,그릴크기x만큼,그릴크기y만큼);
g.drawRect("");
g.setColor(Color.BLUE);
g.fillOval("");
g.fillRect("");

font 생성
s.setFont(new Font("Arial",Font.PLAIN,10)) // Arial체의 plain 10포인트 짜리 폰트 객체 생성 완료

color 생성
Color c = new Color(255,255,255,128) 순서대로 R,G,B,투명도(0~255를 퍼센트로 정의함)

화면 좌표상에 텍스트를 출력하려면 g.drawString("helloworld",x,y); 로 출력함 -> 레이블로도 가능할 듯?
위와같이 폰트 지정 안하면 디폴트로 출력함

drawPolygon(int[]x, int[]y,x.length); 배열의 길이만큼 반복하는게 일반적이고 배열의 좌표마다 점을 찍고 이음

그림을 그리는 paintComponent 함수가 JPanel이나 JLabel같은 그래픽 개체 안에 있는 경우 super.을 붙여 실행해준다.

